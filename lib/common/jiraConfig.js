// *** WARNING: DO NOT MODIFY *** This is a generated JavaScript source code!
//
// Generated by LF-ET 2.2.1 (230906a), https://www.lohrfink.de/lfet
// From decision table
// "/opt/data/github/asciidoctor/asciidoctor-jira/lfet/common/jiraConfig.lfet"
// 02.10.2023 18:41
//
// Changes to this code resulting from refactorings can be synchronised
// with LF-ET using the function "Scrapbook Import".
//
// Prolog Decision Table ---->
function jiraConfig (macroName, parent, projectKey, attrs, logger) {
  let _step = 1
  let _exit = false
  let _prefixDoc = ''
  let _prefixEnv = ''
  const doc = parent.getDocument()
  const _jiraConfig = {
    toJSON: function () {
      const result = {}
      for (const x in this) {
        if (x !== 'username' && x !== 'password') {
          result[x] = this[x]
        } else {
          if (x === 'username' || x === 'password') {
            result[x] = this[x].replace(/./g, '*')
          }
        }
      }
      return result
    }
  }
  do {
    _exit = true
    // $$BasicIndentLevel=2
    // Prolog Decision Table <----
    // Condition B01/01: Step / 1 / jira project key information
    if (_step === 1) {
      // Condition B02: macro name defined
      if (macroName !== '') {
        // Rule R01 ---->
        // Trace ---->
        logger.info(`jiraConfig - 20231002.184107 - 1 / 29 - ${JSON.stringify(_jiraConfig)}`)
        // Trace <----
        // Action A01: append macro name to praefix
        _prefixDoc = `${macroName.toLowerCase()}-`
        _prefixEnv = `${macroName.toUpperCase()}_`
        // Action A07/01: next step / + / next step
        _step++
        _exit = false
        // Rule R01 <----
      } else {
        // Rule R02 ---->
        // Trace ---->
        logger.info(`jiraConfig - 20231002.184107 - 2 / 29 - ${JSON.stringify(_jiraConfig)}`)
        // Trace <----
        // Action A07/01: next step / + / next step
        _step++
        _exit = false
        // Rule R02 <----
      }
    // Condition B01/02: Step / 2 / jira base url information
    } else if (_step === 2) {
      // Condition B03: project key is defined
      if (projectKey) {
        // Condition B04/01: base url with project key praefix is defined / ATTRS / via macro attrs
        if (attrs.jiraBaseUrl) {
          // Rule R03 ---->
          // Trace ---->
          logger.info(`jiraConfig - 20231002.184107 - 3 / 29 - ${JSON.stringify(_jiraConfig)}`)
          // Trace <----
          // Action A02/01: set base url / ATTRS / via macro attrs
          _jiraConfig.baseUrl = attrs['jira-baseurl']
          // Action A07/01: next step / + / next step
          _step++
          _exit = false
          // Rule R03 <----
        // Condition B04/02: base url with project key praefix is defined / DOC / via doc attr
        } else if (doc.getAttribute(`${projectKey.toLowerCase()}-${_prefixDoc}jira-baseurl`)) {
          // Rule R04 ---->
          // Trace ---->
          logger.info(`jiraConfig - 20231002.184107 - 4 / 29 - ${JSON.stringify(_jiraConfig)}`)
          // Trace <----
          // Action A02/03: set base url / PDOC / via doc attr and project key praefix
          _jiraConfig.baseUrl = doc.getAttribute(`${projectKey.toLowerCase()}-${_prefixDoc}jira-baseurl`)
          // Action A07/01: next step / + / next step
          _step++
          _exit = false
          // Rule R04 <----
        // Condition B04/03: base url with project key praefix is defined / ENV / via env
        } else if (process.env[`${projectKey.toUpperCase()}_${_prefixEnv}JIRA_BASEURL`]) {
          // Rule R05 ---->
          // Trace ---->
          logger.info(`jiraConfig - 20231002.184107 - 5 / 29 - ${JSON.stringify(_jiraConfig)}`)
          // Trace <----
          // Action A02/05: set base url / PENV / via env and project key praefix
          _jiraConfig.baseUrl = process.env[`${projectKey.toUpperCase()}_${_prefixEnv}JIRA_BASEURL`]
          // Action A07/01: next step / + / next step
          _step++
          _exit = false
          // Rule R05 <----
        } else {
          // Condition B05/01: base url without project key praefix is defined / ATTRS / via macro attrs
          if (attrs.jiraBaseUrl) {
            // Rule R06 ---->
            // Trace ---->
            logger.info(`jiraConfig - 20231002.184107 - 6 / 29 - ${JSON.stringify(_jiraConfig)}`)
            // Trace <----
            // Action A02/01: set base url / ATTRS / via macro attrs
            _jiraConfig.baseUrl = attrs['jira-baseurl']
            // Action A07/01: next step / + / next step
            _step++
            _exit = false
            // Rule R06 <----
          // Condition B05/02: base url without project key praefix is defined / DOC / via doc attr
          } else if (doc.getAttribute(`${_prefixDoc}jira-baseurl`)) {
            // Rule R07 ---->
            // Trace ---->
            logger.info(`jiraConfig - 20231002.184107 - 7 / 29 - ${JSON.stringify(_jiraConfig)}`)
            // Trace <----
            // Action A02/02: set base url / DOC / via doc attr
            _jiraConfig.baseUrl = doc.getAttribute(`${_prefixDoc}jira-baseurl`)
            // Action A07/01: next step / + / next step
            _step++
            _exit = false
            // Rule R07 <----
          // Condition B05/03: base url without project key praefix is defined / ENV / via env
          } else if (process.env[`${_prefixEnv}JIRA_BASEURL`]) {
            // Rule R08 ---->
            // Trace ---->
            logger.info(`jiraConfig - 20231002.184107 - 8 / 29 - ${JSON.stringify(_jiraConfig)}`)
            // Trace <----
            // Action A02/04: set base url / ENV / via env
            _jiraConfig.baseUrl = process.env[`${_prefixEnv}JIRA_BASEURL`]
            // Action A07/01: next step / + / next step
            _step++
            _exit = false
            // Rule R08 <----
          } else {
            // Rule R09 ---->
            // Trace ---->
            logger.info(`jiraConfig - 20231002.184107 - 9 / 29 - ${JSON.stringify(_jiraConfig)}`)
            // Trace <----
            // Action A06/01: log mandatory information is missing / URL / Jira base url is missing
            logger.error('Jira base url is missing')
            // Action A07/02: next step / E / Exit
            _exit = true
            // Rule R09 <----
          }
        }
      } else {
        // Condition B05/01: base url without project key praefix is defined / ATTRS / via macro attrs
        if (attrs.jiraBaseUrl) {
          // Rule R10 ---->
          // Trace ---->
          logger.info(`jiraConfig - 20231002.184107 - 10 / 29 - ${JSON.stringify(_jiraConfig)}`)
          // Trace <----
          // Action A02/01: set base url / ATTRS / via macro attrs
          _jiraConfig.baseUrl = attrs['jira-baseurl']
          // Action A07/01: next step / + / next step
          _step++
          _exit = false
          // Rule R10 <----
        // Condition B05/02: base url without project key praefix is defined / DOC / via doc attr
        } else if (doc.getAttribute(`${_prefixDoc}jira-baseurl`)) {
          // Rule R11 ---->
          // Trace ---->
          logger.info(`jiraConfig - 20231002.184107 - 11 / 29 - ${JSON.stringify(_jiraConfig)}`)
          // Trace <----
          // Action A02/02: set base url / DOC / via doc attr
          _jiraConfig.baseUrl = doc.getAttribute(`${_prefixDoc}jira-baseurl`)
          // Action A07/01: next step / + / next step
          _step++
          _exit = false
          // Rule R11 <----
        // Condition B05/03: base url without project key praefix is defined / ENV / via env
        } else if (process.env[`${_prefixEnv}JIRA_BASEURL`]) {
          // Rule R12 ---->
          // Trace ---->
          logger.info(`jiraConfig - 20231002.184107 - 12 / 29 - ${JSON.stringify(_jiraConfig)}`)
          // Trace <----
          // Action A02/04: set base url / ENV / via env
          _jiraConfig.baseUrl = process.env[`${_prefixEnv}JIRA_BASEURL`]
          // Action A07/01: next step / + / next step
          _step++
          _exit = false
          // Rule R12 <----
        } else {
          // Rule R13 ---->
          // Trace ---->
          logger.info(`jiraConfig - 20231002.184107 - 13 / 29 - ${JSON.stringify(_jiraConfig)}`)
          // Trace <----
          // Action A06/01: log mandatory information is missing / URL / Jira base url is missing
          logger.error('Jira base url is missing')
          // Action A07/02: next step / E / Exit
          _exit = true
          // Rule R13 <----
        }
      }
    // Condition B01/03: Step / 3 / jira username information
    } else if (_step === 3) {
      // Condition B03: project key is defined
      if (projectKey) {
        // Condition B06/01: username with project key praefix is defined / DOC / via doc attr
        if (doc.getAttribute(`${projectKey.toLowerCase()}-${_prefixDoc}jira-username`)) {
          // Rule R14 ---->
          // Trace ---->
          logger.info(`jiraConfig - 20231002.184107 - 14 / 29 - ${JSON.stringify(_jiraConfig)}`)
          // Trace <----
          // Action A03/03: set username / PDOC / via doc attr and project key praefix
          _jiraConfig.username = doc.getAttribute(`${_prefixDoc}jira-username`)
          // Action A07/01: next step / + / next step
          _step++
          _exit = false
          // Rule R14 <----
        // Condition B06/02: username with project key praefix is defined / ENV / via env
        } else if (process.env[`${projectKey.toUpperCase()}_${_prefixEnv}JIRA_USERNAME`]) {
          // Rule R15 ---->
          // Trace ---->
          logger.info(`jiraConfig - 20231002.184107 - 15 / 29 - ${JSON.stringify(_jiraConfig)}`)
          // Trace <----
          // Action A03/04: set username / PENV / via env and project key praefix
          _jiraConfig.username = process.env[`${projectKey.toUpperCase()}_${_prefixEnv}JIRA_USERNAME`]
          // Action A07/01: next step / + / next step
          _step++
          _exit = false
          // Rule R15 <----
        } else {
          // Condition B07/01: username without project key praefix is defined / DOC / via doc attr
          if (doc.getAttribute(`${_prefixDoc}jira-username`)) {
            // Rule R16 ---->
            // Trace ---->
            logger.info(`jiraConfig - 20231002.184107 - 16 / 29 - ${JSON.stringify(_jiraConfig)}`)
            // Trace <----
            // Action A03/01: set username / DOC / via doc attr
            _jiraConfig.baseUrl = doc.getAttribute(`${_prefixDoc}jira-baseurl`)
            // Action A07/01: next step / + / next step
            _step++
            _exit = false
            // Rule R16 <----
          // Condition B07/02: username without project key praefix is defined / ENV / via env
          } else if (process.env[`${_prefixEnv}JIRA_USERNAME`]) {
            // Rule R17 ---->
            // Trace ---->
            logger.info(`jiraConfig - 20231002.184107 - 17 / 29 - ${JSON.stringify(_jiraConfig)}`)
            // Trace <----
            // Action A03/02: set username / ENV / via env
            _jiraConfig.username = process.env[`${_prefixEnv}JIRA_USERNAME`]
            // Action A07/01: next step / + / next step
            _step++
            _exit = false
            // Rule R17 <----
          } else {
            // Rule R18 ---->
            // Trace ---->
            logger.info(`jiraConfig - 20231002.184107 - 18 / 29 - ${JSON.stringify(_jiraConfig)}`)
            // Trace <----
            // Action A06/02: log mandatory information is missing / USR / Jira username is missing
            logger.error('Jira username is missing')
            // Action A07/02: next step / E / Exit
            _exit = true
            // Rule R18 <----
          }
        }
      } else {
        // Condition B07/01: username without project key praefix is defined / DOC / via doc attr
        if (doc.getAttribute(`${_prefixDoc}jira-username`)) {
          // Rule R19 ---->
          // Trace ---->
          logger.info(`jiraConfig - 20231002.184107 - 19 / 29 - ${JSON.stringify(_jiraConfig)}`)
          // Trace <----
          // Action A03/01: set username / DOC / via doc attr
          _jiraConfig.baseUrl = doc.getAttribute(`${_prefixDoc}jira-baseurl`)
          // Action A07/01: next step / + / next step
          _step++
          _exit = false
          // Rule R19 <----
        // Condition B07/02: username without project key praefix is defined / ENV / via env
        } else if (process.env[`${_prefixEnv}JIRA_USERNAME`]) {
          // Rule R20 ---->
          // Trace ---->
          logger.info(`jiraConfig - 20231002.184107 - 20 / 29 - ${JSON.stringify(_jiraConfig)}`)
          // Trace <----
          // Action A03/02: set username / ENV / via env
          _jiraConfig.username = process.env[`${_prefixEnv}JIRA_USERNAME`]
          // Action A07/01: next step / + / next step
          _step++
          _exit = false
          // Rule R20 <----
        } else {
          // Rule R21 ---->
          // Trace ---->
          logger.info(`jiraConfig - 20231002.184107 - 21 / 29 - ${JSON.stringify(_jiraConfig)}`)
          // Trace <----
          // Action A06/02: log mandatory information is missing / USR / Jira username is missing
          logger.error('Jira username is missing')
          // Action A07/02: next step / E / Exit
          _exit = true
          // Rule R21 <----
        }
      }
    } else {
      // Condition B03: project key is defined
      if (projectKey) {
        // Condition B08/01: password with project key praefix is defined / ENV / via env
        if (process.env[`${projectKey.toUpperCase()}_${_prefixEnv}JIRA_PASSWORD`]) {
          // Rule R22 ---->
          // Trace ---->
          logger.info(`jiraConfig - 20231002.184107 - 22 / 29 - ${JSON.stringify(_jiraConfig)}`)
          // Trace <----
          // Action A04/02: set password / PENV / via env and project key praefix
          _jiraConfig.password = process.env[`${projectKey.toUpperCase()}_${_prefixEnv}JIRA_PASSWORD`]
          // Action A07/02: next step / E / Exit
          _exit = true
          // Rule R22 <----
        } else {
          // Condition B09/01: password without project key praefix is defined / ENV / via env
          if (process.env[`${_prefixEnv}JIRA_PASSWORD`]) {
            // Rule R23 ---->
            // Trace ---->
            logger.info(`jiraConfig - 20231002.184107 - 23 / 29 - ${JSON.stringify(_jiraConfig)}`)
            // Trace <----
            // Action A04/01: set password / ENV / via env
            _jiraConfig.password = process.env[`${_prefixEnv}JIRA_PASSWORD`]
            // Action A07/02: next step / E / Exit
            _exit = true
            // Rule R23 <----
          } else {
            // Condition B10/01: apitoken with project key praefix is defined / ENV / via env
            if (process.env[`${projectKey.toUpperCase()}_${_prefixEnv}JIRA_APITOKEN`]) {
              // Rule R24 ---->
              // Trace ---->
              logger.info(`jiraConfig - 20231002.184107 - 24 / 29 - ${JSON.stringify(_jiraConfig)}`)
              // Trace <----
              // Action A05/02: set apitoken / PENV / via env and project key praefix
              _jiraConfig.password = process.env[`${projectKey.toUpperCase()}_${_prefixEnv}JRA_APITOKEN`]
              // Action A07/02: next step / E / Exit
              _exit = true
              // Rule R24 <----
            } else {
              // Condition B11/01: apitoken without project key praefix is defined / ENV / via env
              if (process.env[`${_prefixEnv}JIRA_APITOKEN`]) {
                // Rule R25 ---->
                // Trace ---->
                logger.info(`jiraConfig - 20231002.184107 - 25 / 29 - ${JSON.stringify(_jiraConfig)}`)
                // Trace <----
                // Action A05/01: set apitoken / ENV / via env
                _jiraConfig.password = process.env[`${_prefixEnv}JIRA_APITOKEN`]
                // Action A07/02: next step / E / Exit
                _exit = true
                // Rule R25 <----
              } else {
                // Rule R26 ---->
                // Trace ---->
                logger.info(`jiraConfig - 20231002.184107 - 26 / 29 - ${JSON.stringify(_jiraConfig)}`)
                // Trace <----
                // Action A06/03: log mandatory information is missing / PWD / Jira password / apitoken is missing
                logger.error('Jira password / apitoken is missing')
                // Action A07/02: next step / E / Exit
                _exit = true
                // Rule R26 <----
              }
            }
          }
        }
      } else {
        // Condition B09/01: password without project key praefix is defined / ENV / via env
        if (process.env[`${_prefixEnv}JIRA_PASSWORD`]) {
          // Rule R27 ---->
          // Trace ---->
          logger.info(`jiraConfig - 20231002.184107 - 27 / 29 - ${JSON.stringify(_jiraConfig)}`)
          // Trace <----
          // Action A04/01: set password / ENV / via env
          _jiraConfig.password = process.env[`${_prefixEnv}JIRA_PASSWORD`]
          // Action A07/02: next step / E / Exit
          _exit = true
          // Rule R27 <----
        } else {
          // Condition B11/01: apitoken without project key praefix is defined / ENV / via env
          if (process.env[`${_prefixEnv}JIRA_APITOKEN`]) {
            // Rule R28 ---->
            // Trace ---->
            logger.info(`jiraConfig - 20231002.184107 - 28 / 29 - ${JSON.stringify(_jiraConfig)}`)
            // Trace <----
            // Action A05/01: set apitoken / ENV / via env
            _jiraConfig.password = process.env[`${_prefixEnv}JIRA_APITOKEN`]
            // Action A07/02: next step / E / Exit
            _exit = true
            // Rule R28 <----
          } else {
            // Rule R29 ---->
            // Trace ---->
            logger.info(`jiraConfig - 20231002.184107 - 29 / 29 - ${JSON.stringify(_jiraConfig)}`)
            // Trace <----
            // Action A06/03: log mandatory information is missing / PWD / Jira password / apitoken is missing
            logger.error('Jira password / apitoken is missing')
            // Action A07/02: next step / E / Exit
            _exit = true
            // Rule R29 <----
          }
        }
      }
    }
    // Epilog Decision Table ---->
  } while (_exit === false)
  return _jiraConfig
}

module.exports = {
  createConfig: (macroName, parent, projectKey, attrs, logger) => {
    return jiraConfig(macroName, parent, projectKey, attrs, logger)
  }
}
// Epilog Decision Table <----

// End of generated JavaScript source code
// Generated by LF-ET 2.2.1 (230906a), https://www.lohrfink.de/lfet
