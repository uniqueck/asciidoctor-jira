// *** WARNING: DO NOT MODIFY *** This is a generated JavaScript source code!
//
// Generated by LF-ET 2.2.1 (230906a), https://www.lohrfink.de/lfet
// From decision table
// "/opt/data/github/asciidoctor/asciidoctor-jira/lfet/common/plantumlConfig.lfet"
// 02.10.2023 00:34
//
// Changes to this code resulting from refactorings can be synchronised
// with LF-ET using the function "Scrapbook Import".
//
// Prolog Decision Table ---->
function plantumlConfig (macroName, parent, attrs, logger) {
  let _step = 1
  let _exit = false
  const _prefix = 'plantuml'
  const _prefixDoc = `${macroName.toLowerCase()}-${_prefix}-`
  const _plantumlConfig = { }
  const doc = parent.getDocument()
  do {
    _exit = true
    // $$BasicIndentLevel=2
    // Prolog Decision Table <----
    let _plantumlconfigRuleExecuted = false
    // Condition B01/01: step / 1 / server base url
    if (_step === 1) {
      // Condition B02/01: server url is set / ATTR / via block macro attr
      if (attrs[`${_prefix}ServerUrl`]) {
        // Rule R01 ---->
        _plantumlconfigRuleExecuted = true
        // Trace ---->
        logger.info(`plantumlConfig - 20231002.003412 - 1 / 6 - ${JSON.stringify(_plantumlConfig)}`)
        // Trace <----
        // Action A01/01: load config / gantt / load gantt configuration options
        _plantumlConfig.gantt = require('./plantumlGanttConfig').createConfig(_prefixDoc, parent, attrs, logger)
        // Action A02/02: set server base url / ATTR / set value from attributes
        _plantumlConfig.serverUrl = attrs[`${_prefix}ServerUrl`]
        // Action A04/01: next step / + / next step
        _step++
        _exit = false
        // Rule R01 <----
      // Condition B02/02: server url is set / DOC / via doc attribute
      } else if (doc.getAttribute(`${_prefixDoc}server-url`)) {
        // Rule R02 ---->
        _plantumlconfigRuleExecuted = true
        // Trace ---->
        logger.info(`plantumlConfig - 20231002.003412 - 2 / 6 - ${JSON.stringify(_plantumlConfig)}`)
        // Trace <----
        // Action A01/01: load config / gantt / load gantt configuration options
        _plantumlConfig.gantt = require('./plantumlGanttConfig').createConfig(_prefixDoc, parent, attrs, logger)
        // Action A02/01: set server base url / DOC / set value from doc attribute
        _plantumlConfig.serverUrl = doc.getAttribute(`${_prefixDoc}server-url`)
        // Action A04/01: next step / + / next step
        _step++
        _exit = false
        // Rule R02 <----
      } else {
        // Rule R03 ---->
        _plantumlconfigRuleExecuted = true
        // Trace ---->
        logger.info(`plantumlConfig - 20231002.003412 - 3 / 6 - ${JSON.stringify(_plantumlConfig)}`)
        // Trace <----
        // Action A01/01: load config / gantt / load gantt configuration options
        _plantumlConfig.gantt = require('./plantumlGanttConfig').createConfig(_prefixDoc, parent, attrs, logger)
        // Action A02/03: set server base url / DEF / https://kroki.io/plantuml
        _plantumlConfig.serverUrl = 'https://kroki.io/plantuml'
        // Action A04/01: next step / + / next step
        _step++
        _exit = false
        // Rule R03 <----
      }
    // Condition B01/02: step / 2 / theme
    } else if (_step === 2) {
      // Condition B03/01: theme option is set / ATTR / via block macro attr
      if (attrs[`${_prefix}Theme`]) {
        // Rule R04 ---->
        _plantumlconfigRuleExecuted = true
        // Trace ---->
        logger.info(`plantumlConfig - 20231002.003412 - 4 / 6 - ${JSON.stringify(_plantumlConfig)}`)
        // Trace <----
        // Action A03/02: set theme option / ATTR / via block macro attribute
        _plantumlConfig.theme = attrs[`${_prefix}Theme`]
        // Action A04/03: next step / E / Exit
        _exit = true
        // Rule R04 <----
      // Condition B03/02: theme option is set / DOC / via doc attribute
      } else if (doc.getAttribute(`${_prefixDoc}theme`)) {
        // Rule R05 ---->
        _plantumlconfigRuleExecuted = true
        // Trace ---->
        logger.info(`plantumlConfig - 20231002.003412 - 5 / 6 - ${JSON.stringify(_plantumlConfig)}`)
        // Trace <----
        // Action A03/03: set theme option / DOC / via doc attribute
        _plantumlConfig.theme = doc.getAttribute(`${_prefixDoc}theme`)
        // Action A04/03: next step / E / Exit
        _exit = true
        // Rule R05 <----
      } else {
        // Rule R06 ---->
        _plantumlconfigRuleExecuted = true
        // Trace ---->
        logger.info(`plantumlConfig - 20231002.003412 - 6 / 6 - ${JSON.stringify(_plantumlConfig)}`)
        // Trace <----
        // Action A03/01: set theme option / DEF / hacker
        _plantumlConfig.theme = 'hacker'
        // Action A04/03: next step / E / Exit
        _exit = true
        // Rule R06 <----
      }
    }

    if (!_plantumlconfigRuleExecuted) {
      // Trace ---->
      logger.info(`plantumlConfig - 20231002.003412 - 0 / 6 - ${JSON.stringify(_plantumlConfig)}`)
      // Trace <----
      // Error ---->
      // profile LFET.JavaScript.Error.ini not found
      // used LF-ET 2.2.1 (230906a) build in default
      throw new Error("no rule executed in decision table 'plantumlConfig'")
      // Error <----
    }
    // Epilog Decision Table ---->
  } while (_exit === false)
  return _plantumlConfig
}

module.exports = {
  createConfig: (macroName, parent, attrs, logger) => {
    return plantumlConfig(macroName, parent, attrs, logger)
  }
}
// Epilog Decision Table <----

// End of generated JavaScript source code
// Generated by LF-ET 2.2.1 (230906a), https://www.lohrfink.de/lfet
