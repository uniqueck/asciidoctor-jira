// *** WARNING: DO NOT MODIFY *** This is a generated JavaScript source code!
//
// Generated by LF-ET 2.2.1 (230906a), https://www.lohrfink.de/lfet
// From decision table
// "/opt/data/github/asciidoctor/asciidoctor-jira/lfet/blockmacro/roadmapBlockmacroConfig.lfet"
// 26.09.2023 16:33
//
// Changes to this code resulting from refactorings can be synchronised
// with LF-ET using the function "Scrapbook Import".
//
// Prolog Decision Table ---->
function roadmapBlockmacroConfig (name, parent, target, attrs, logger) {
  let _step = 1
  let _exit = false
  const _roadmapBlockmacroConfig = {
    toJSON: function () {
      const result = {}
      for (const x in this) {
        if (x !== 'jiraUsername' && x !== 'jiraPassword') {
          result[x] = this[x]
        } else {
          if (x === 'jiraUsername' || x === 'jiraPassword') {
            result[x] = this[x].replace(/./g, '*')
          }
        }
      }
      return result
    },
    jiraFields: {
      epicName: 'customfield_10004',
      summary: 'summary',
      status: 'status',
      issueType: 'issuetype',
      resolutionDate: 'resolutiondate',
      dueDate: 'duedate',
      created: 'created'
    },
    getCategoryLabel: function (_catIndex) {
      return this[`${this.categories[_catIndex]}Label`]
    },
    getCategoryJQL: function (_catIndex) {
      return this[`${this.categories[_catIndex]}JQL`]
    }
  }
  let catIndex = -1
  const doc = parent.getDocument()
  do {
    _exit = true
    // $$BasicIndentLevel=2
    // Prolog Decision Table <----
    // Condition C01/01: Step / 1 / jira project key information
    if (_step === 1) {
      // Condition C02: jira project key information is set
      if (target !== undefined) {
        // Rule R01 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 1 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A01: set jira project
        _roadmapBlockmacroConfig.projectKey = parent.applySubstitutions(target, ['attributes'])
        // Action A02: load jira config
        _roadmapBlockmacroConfig.jira = require('../common/jiraConfig').createConfig(name, parent, _roadmapBlockmacroConfig.projectKey, attrs, logger)
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R01 <----
      } else {
        // Rule R02 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 2 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A12/01: log mandatory information is missing / PRJ / Jira project key is missing
        logger.error('Jira project key is missing')
        // Action A13/03: next step / E / Exit
        _exit = true
        // Rule R02 <----
      }
    // Condition C01/02: Step / 2 / year information
    } else if (_step === 2) {
      // Condition C03/01: year information is set / ATTR / via macro attributes
      if (attrs.year) {
        // Rule R03 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 3 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A03/01: set year / ATTR / via macro attributes
        _roadmapBlockmacroConfig.year = attrs.year
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R03 <----
      // Condition C03/02: year information is set / DOC / via doc attribute
      } else if (doc.getAttribute(`${name.toLowerCase()}-year`)) {
        // Rule R04 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 4 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A03/02: set year / DOC / via doc attribute
        _roadmapBlockmacroConfig.year = doc.getAttribute(`${name}-year`)
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R04 <----
      } else {
        // Rule R05 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 5 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A03/03: set year / DEF / current year
        _roadmapBlockmacroConfig.year = new Date().toLocaleDateString('en-US', { year: 'numeric' })
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R05 <----
      }
    // Condition C01/03: Step / 3 / category information
    } else if (_step === 3) {
      // Condition C04/01: category information is set / ATTR / category information via macro attribute
      if (attrs.categories) {
        // Rule R06 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 6 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A04/01: set categories / ATTR / via macro attributes
        _roadmapBlockmacroConfig.categories = attrs.categories.split(',').map(it => it.trim())
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R06 <----
      // Condition C04/02: category information is set / DOC / category information via doc attribute
      } else if (doc.getAttribute(`${name.toLowerCase()}-categories`)) {
        // Rule R07 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 7 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A04/02: set categories / DOC / via doc attribute
        _roadmapBlockmacroConfig.categories = doc.getAttribute(`${name}-categories`).split(',').map(it => it.trim())
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R07 <----
      } else {
        // Rule R08 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 8 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A04/03: set categories / DEF / maintenance,feature,security,infrastructure,deprecated,migration
        _roadmapBlockmacroConfig.categories = 'maintenance,feature,security,infrastructure,deprecated,migration'.split(',').map(it => it.trim())
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R08 <----
      }
    // Condition C01/04: Step / 4 / plantuml-server base url information
    } else if (_step === 4) {
      // Condition C05: plantuml server url is set
      if (doc.getAttribute(`${name.toLowerCase()}-plantuml-server-url`)) {
        // Rule R09 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 9 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A05/01: set plantuml-server base url / SET / set value from doc attribute
        _roadmapBlockmacroConfig.plantumlServerUrl = doc.getAttribute(`${name.toLowerCase()}-plantuml-server-url`)
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R09 <----
      } else {
        // Rule R10 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 10 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A05/02: set plantuml-server base url / DEF / https://kroki.io/plantuml
        _roadmapBlockmacroConfig.plantumlServerUrl = 'https://kroki.io/plantuml'
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R10 <----
      }
    // Condition C01/05: Step / 5 / which status should act for closed issues
    } else if (_step === 5) {
      // Condition C06/01: which status should act for closed issues / ATTR / via block macro attributes
      if (attrs['closed-status']) {
        // Rule R11 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 11 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A06/01: set closed status / ATTR / via block macro attribute
        _roadmapBlockmacroConfig.closedStatus = attrs[`${name.toLowerCase()}-closed-status`].split(',').map(it => it.trim())
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R11 <----
      // Condition C06/02: which status should act for closed issues / DOC / via doc attribute
      } else if (doc.getAttribute(`${name.toLowerCase()}-closed-status`)) {
        // Rule R12 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 12 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A06/02: set closed status / DOC / via doc attribute
        _roadmapBlockmacroConfig.closedStatus = doc.getAttribute(`${name.toLowerCase()}-closed-status`).split(',').map(it => it.trim())
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R12 <----
      } else {
        // Rule R13 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 13 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A06/03: set closed status / DEF / Closed,Resolved
        _roadmapBlockmacroConfig.closedStatus = 'Closed,Resolved'.split(',')
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R13 <----
      }
    // Condition C01/06: Step / 6 / plantuml theme option
    } else if (_step === 6) {
      // Condition C07/01: plantuml theme option is set / ATTR / via block macro attr
      if (attrs.theme) {
        // Rule R14 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 14 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A07/02: set plantuml theme option / ATTR / via block macro attribute
        _roadmapBlockmacroConfig.plantumlTheme = attrs.theme
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R14 <----
      // Condition C07/02: plantuml theme option is set / DOC / via doc attribute
      } else if (doc.getAttribute(`${name.toLowerCase()}-theme`)) {
        // Rule R15 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 15 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A07/03: set plantuml theme option / DOC / via doc attribute
        _roadmapBlockmacroConfig.plantumlTheme = doc.getAttribute(`${name.toLowerCase()}-theme`)
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R15 <----
      } else {
        // Rule R16 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 16 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A07/01: set plantuml theme option / DEF / hacker
        _roadmapBlockmacroConfig.plantumlTheme = 'hacker'
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R16 <----
      }
    // Condition C01/07: Step / 7 / lastRoadmapReleaseDate
    } else if (_step === 7) {
      // Condition C08/01: last roadmap release date is set / ATTR / via blockmacro attr
      if (attrs['release-date']) {
        // Rule R17 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 17 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A08/01: set last roadmap release date / ATTR / via blockmacro attribute
        _roadmapBlockmacroConfig.lastRoadmapReleaseDate = attrs['release-date']
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R17 <----
      // Condition C08/02: last roadmap release date is set / DOC / via doc attribute
      } else if (doc.getAttribute(`${name.toLowerCase()}-release-date`)) {
        // Rule R18 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 18 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A08/02: set last roadmap release date / DOC / via doc attribute
        _roadmapBlockmacroConfig.lastRoadmapReleaseDate = doc.getAttribute(`${name.toLowerCase()}-release-date`)
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R18 <----
      } else {
        // Rule R19 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 19 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A08/03: set last roadmap release date / UDEF / not set
        _roadmapBlockmacroConfig.lastRoadmapReleaseDate = undefined
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R19 <----
      }
    // Condition C01/08: Step / 8 / legend for status
    } else if (_step === 8) {
      // Condition C09/01: legend for status is set / ATTR / via block macro attribute
      if (attrs['legend-for-status']) {
        // Rule R20 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 20 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A09/02: set legend for status / ATTR / via block macro attribute
        _roadmapBlockmacroConfig.legendForStatus = attrs['legend-for-status'].split(',').map(it => it.trim())
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R20 <----
      // Condition C09/02: legend for status is set / DOC / via doc attribute
      } else if (doc.getAttribute(`${name.toLowerCase()}-legend-for-status`)) {
        // Rule R21 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 21 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A09/03: set legend for status / DOC / via doc attribute
        _roadmapBlockmacroConfig.legendForStatus = doc.getAttribute(`${name.toLowerCase()}-legend-for-status`).split(',').map(it => it.trim())
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R21 <----
      } else {
        // Rule R22 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 22 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A09/01: set legend for status / DEF / Open,In Progress,Closed
        _roadmapBlockmacroConfig.legendForStatus = 'Open,In Progress,Closed'.split(',').map(it => it.trim())
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R22 <----
      }
    // Condition C01/09: Step / 9 / check for more categories to process
    } else if (_step === 9) {
      // Prolog Condition C10 ---->
      catIndex++
      // Prolog Condition C10 <----
      // Condition C10: one more category to process
      if (catIndex < _roadmapBlockmacroConfig.categories.length) {
        // Rule R23 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 23 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R23 <----
      } else {
        // Rule R24 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 24 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A13/03: next step / E / Exit
        _exit = true
        // Rule R24 <----
      }
    // Condition C01/10: Step / 9a / label for category
    } else if (_step === 10) {
      // Condition C11/01: label for category is set / ATTR / via block macro attribute
      if (attrs[`${_roadmapBlockmacroConfig.categories[catIndex]}-label`]) {
        // Rule R25 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 25 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A10/01: set category label / ATTR / via block macro attribute
        _roadmapBlockmacroConfig[`${_roadmapBlockmacroConfig.categories[catIndex]}Label`] = attrs[`${_roadmapBlockmacroConfig.categories[catIndex]}-label`]
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R25 <----
      // Condition C11/02: label for category is set / DOC / via doc attribute
      } else if (doc.getAttribute(`${name.toLowerCase()}-${_roadmapBlockmacroConfig.categories[catIndex]}-label`)) {
        // Rule R26 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 26 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A10/02: set category label / DOC / via doc attribute
        _roadmapBlockmacroConfig[`${_roadmapBlockmacroConfig.categories[catIndex]}Label`] = doc.getAttribute(`${name.toLowerCase()}-${_roadmapBlockmacroConfig.categories[catIndex]}-label`)
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R26 <----
      } else {
        // Rule R27 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 27 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A10/03: set category label / DEF / set category as default label
        _roadmapBlockmacroConfig[`${_roadmapBlockmacroConfig.categories[catIndex]}Label`] = _roadmapBlockmacroConfig.categories[catIndex]
        // Action A13/01: next step / + / next step
        _step++
        _exit = false
        // Rule R27 <----
      }
    } else {
      // Condition C12/01: jql for category is set / ATTR / via block macro attribute
      if (attrs[`${_roadmapBlockmacroConfig.categories[catIndex]}-jql`]) {
        // Rule R28 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 28 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A11/01: set category jql / ATTR / via block macro attribute
        const categoryJQLSuffixPart = attrs[`${_roadmapBlockmacroConfig.categories[catIndex]}-jql`]
        _roadmapBlockmacroConfig[`${_roadmapBlockmacroConfig.categories[catIndex]}JQL`] = `project = ${_roadmapBlockmacroConfig.projectKey} and labels in (Roadmap) and labels in ('${_roadmapBlockmacroConfig.year}') and ${categoryJQLSuffixPart}`
        // Action A13/02: next step / 9 / check for more categories to process
        _step = 9
        _exit = false
        // Rule R28 <----
      // Condition C12/02: jql for category is set / DOC / via doc attribute
      } else if (doc.getAttribute(`${name.toLowerCase()}-${_roadmapBlockmacroConfig.categories[catIndex]}-jql`)) {
        // Rule R29 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 29 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A11/02: set category jql / DOC / via doc attribute
        const categoryJQLSuffixPart = doc.getAttribute(`${name.toLowerCase()}-${_roadmapBlockmacroConfig.categories[catIndex]}-jql`)
        _roadmapBlockmacroConfig[`${_roadmapBlockmacroConfig.categories[catIndex]}JQL`] = `project = ${_roadmapBlockmacroConfig.projectKey} and labels in (Roadmap) and labels in ('${_roadmapBlockmacroConfig.year}') and ${categoryJQLSuffixPart}`
        // Action A13/02: next step / 9 / check for more categories to process
        _step = 9
        _exit = false
        // Rule R29 <----
      } else {
        // Rule R30 ---->
        // Trace ---->
        logger.info(`roadmapBlockmacroConfig - 20230926.163352 - 30 / 30 - ${JSON.stringify(_roadmapBlockmacroConfig)}`)
        // Trace <----
        // Action A11/03: set category jql / DEF / set category as default label
        _roadmapBlockmacroConfig[`${_roadmapBlockmacroConfig.categories[catIndex]}JQL`] = `project = ${_roadmapBlockmacroConfig.projectKey} and labels in (Roadmap) and labels in ('${_roadmapBlockmacroConfig.year}') and labels in (${_roadmapBlockmacroConfig.categories[catIndex]})`
        // Action A13/02: next step / 9 / check for more categories to process
        _step = 9
        _exit = false
        // Rule R30 <----
      }
    }
    // Epilog Decision Table ---->
  } while (_exit === false)
  return _roadmapBlockmacroConfig
}

module.exports = {
  createConfig: (name, parent, target, attrs, logger) => {
    return roadmapBlockmacroConfig(name, parent, target, attrs, logger)
  }
}
// Epilog Decision Table <----

// End of generated JavaScript source code
// Generated by LF-ET 2.2.1 (230906a), https://www.lohrfink.de/lfet
