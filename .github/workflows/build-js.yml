name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'

jobs:
  build:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        node-version:
          - 12.x
          - 14.x
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up NodeJs ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: create .env
        if: runner.os == 'Linux'
        run: |
          cat << EOF > .env
          AJE_USERNAME=${{ secrets.AJE_USERNAME }}
          AJE_APITOKEN=${{ secrets.AJE_APITOKEN }}
          AJE_BASEURL=${{ secrets.AJE_JIRABASEURL }}
          JIRA_USERNAME=${{ secrets.AJE_USERNAME }}
          JIRA_APITOKEN=${{ secrets.AJE_APITOKEN }}
          JIRA_BASEURL=${{ secrets.AJE_JIRABASEURL }}
          EOF

      - name: create .env
        if: runner.os == 'Windows'
        run: |
          "AJE_USERNAME=${{ secrets.AJE_USERNAME }}" | ac .env
          "AJE_APITOKEN=${{ secrets.AJE_APITOKEN }}"  | ac .env
          "AJE_BASEURL=${{ secrets.AJE_JIRABASEURL }}"  | ac .env
          "JIRA_USERNAME=${{ secrets.AJE_USERNAME }}" | ac .env
          "JIRA_APITOKEN=${{ secrets.AJE_APITOKEN }}"  | ac .env
          "JIRA_BASEURL=${{ secrets.AJE_JIRABASEURL }}"  | ac .env

      - name: test
        run: npm test

      - name: Upload generated documentation for deploy step
        uses: actions/upload-artifact@v2
        if: runner.os == 'Linux' && matrix.node-version == '14.x'
        with:
          name: documentation
          path: test/antora/public

      - name: extract version
        id: package-json
        run: echo '::set-output name=version::$(npm --silent run version)'

      - name: print version
        run: echo "Version is ${{ steps.package-json.outputs.version }}"



  deploy-documentation:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:

      - uses: actions/download-artifact@v2
        with:
          name: documentation

      - uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm ci

      - uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_TOKEN }}

      - uses: ethomson/send-tweet-action@v1
        with:
          status: "Hi, this is a test!"
          consumer-key: ${{ secrets.TWITTER_CONSUMER_API_KEY }}
          consumer-secret: ${{ secrets.TWITTER_CONSUMER_API_SECRET }}
          access-token: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          access-token-secret: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
